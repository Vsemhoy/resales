// üéØ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:

// //–í ComponentA.js
// const ComponentA = () => {
//   const { userdata, setUserdata } = useUserData();

//   const updateName = () => {
//     setUserdata({ ...userdata, name: "–ù–æ–≤–æ–µ –∏–º—è" });
//   };

//   return <button onClick={updateName}>–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è</button>;
// };

//  //–í ComponentB.js (–≤ –ª—é–±–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
// const ComponentB = () => {
//   const { userdata } = useUserData();

//   return <div>–¢–µ–∫—É—â–µ–µ –∏–º—è: {userdata.name}</div>; // –ë—É–¥–µ—Ç "–ù–æ–≤–æ–µ –∏–º—è"
// };

// //–ü–†–ê–í–ò–õ–¨–ù–û - –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
// setUserdata({ ...userdata, name: "–ù–æ–≤–æ–µ –∏–º—è" });

// // –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û - –º—É—Ç–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
// userdata.name = "–ù–æ–≤–æ–µ –∏–º—è"; // ‚ùå –ù–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç!
// setUserdata(userdata);

// –í —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
// const ProfileForm = () => {
//   const { userdata, setUserdata } = useUserData();

//   const handleSave = (newData) => {
//     setUserdata({ ...userdata, ...newData });
// // –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Ö–µ–¥–µ—Ä, —Å–∞–π–¥–±–∞—Ä, etc.) —Å—Ä–∞–∑—É —É–≤–∏–¥—è—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä!
//   };
// };

import { createContext, useContext, useState, useEffect } from 'react';
import { CSRF_TOKEN, PRODMODE } from '../config/config';
import { PROD_AXIOS_INSTANCE } from '../config/Api';
import { MS_USER } from '../mock/MAINSTATE';

const UserDataContext = createContext();

export const UserDataProvider = ({ children }) => {
	const [userdata, setUserdata] = useState(null);
	const [pageLoaded, setPageLoaded] = useState(false);

	const get_userdata = async () => {
		try {
			if (PRODMODE) {
				const response = await PROD_AXIOS_INSTANCE.get('/usda?_token=' + CSRF_TOKEN);
				console.log('response.data.user: ', response?.data?.user || 'No data');
				setUserdata(response.data?.user ?? response.data);
			} else {
				setUserdata(MS_USER);
			}
		} catch (e) {
			console.error('get_userdata error:', e);
		} finally {
			setPageLoaded(true);
		}
	};

	useEffect(() => {
		get_userdata();
	}, []);

	return (
		<UserDataContext.Provider value={{ userdata, setUserdata, pageLoaded }}>
			{children}
		</UserDataContext.Provider>
	);
};

export const useUserData = () => useContext(UserDataContext);
