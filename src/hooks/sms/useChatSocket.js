import { useEffect, useRef } from 'react';
import { PRODMODE, BFF_PORT } from '../../config/config';
import io from 'socket.io-client';

const getWebSocketUrl = () => {
	const host = PRODMODE ? '192.168.1.16' : 'localhost';
	return `http://${host}:${BFF_PORT}`; // –í–∞–∂–Ω–æ: HTTP –¥–ª—è Socket.io!
};

export const useChatSocket = ({ chatId, onNewMessage }) => {
	const socketRef = useRef(null);

	useEffect(() => {
		if (!chatId) return;

		const socketUrl = getWebSocketUrl();
		console.log(`[useChatSocket] Connecting to Socket.io: ${socketUrl}`);

		// –°–æ–∑–¥–∞–µ–º Socket.io –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
		socketRef.current = io(socketUrl, {
			transports: ['websocket', 'polling'],
			withCredentials: true,
		});

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Socket.io
		socketRef.current.on('connect', () => {
			console.log('[useChatSocket] ‚úÖ Socket.io connected, ID:', socketRef.current.id);

			// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞
			socketRef.current.emit('subscribe', chatId);
			console.log(`[useChatSocket] Subscribed to room: ${chatId}`);
		});

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç API routes
		socketRef.current.on('new_message', (data) => {
			console.log('[useChatSocket] üì® Received new_message:', data);
			onNewMessage && onNewMessage(data);
		});

		socketRef.current.on('update_message', (data) => {
			console.log('[useChatSocket] ‚úèÔ∏è Received update_message:', data);
			// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		});

		socketRef.current.on('edit_message', (data) => {
			console.log('[useChatSocket] üìù Received edit_message:', data);
			// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		});

		socketRef.current.on('reply_message', (data) => {
			console.log('[useChatSocket] ‚Ü©Ô∏è Received reply_message:', data);
			// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
		});

		socketRef.current.on('delete_message', (data) => {
			console.log('[useChatSocket] üóëÔ∏è Received delete_message:', data);
			// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		});

		socketRef.current.on('status_update', (data) => {
			console.log('[useChatSocket] üìä Received status_update:', data);
			// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ)
		});

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
		socketRef.current.on('server_restart', (data) => {
			console.log('[useChatSocket] üîÑ Server restart notification:', data);
			// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
		});

		socketRef.current.on('connect_error', (err) => {
			console.error('[useChatSocket] üö® Socket.io connection error:', err);
		});

		socketRef.current.on('disconnect', (reason) => {
			console.log('[useChatSocket] ‚ùå Socket.io disconnected:', reason);
		});

		// Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
		return () => {
			console.log('[useChatSocket] üßπ Cleaning up Socket.io connection');
			if (socketRef.current) {
				socketRef.current.disconnect();
				socketRef.current = null;
			}
		};
	}, [chatId, onNewMessage]);

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
	const sendMessage = (messageData) => {
		if (socketRef.current?.connected) {
			socketRef.current.emit('send_message', messageData);
		} else {
			console.warn('[useChatSocket] Socket not connected');
		}
	};

	return {
		connected: socketRef.current?.connected || false,
		socketId: socketRef.current?.id,
		sendMessage,
	};
};

// –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø MVP
// export const useChatSocket = () => {
//   return {
//     messages: [],
//     connected: false,
//     ws: null,
//     sendMessage: () => console.warn('WebSocket –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è MVP'),
//   };
// };
