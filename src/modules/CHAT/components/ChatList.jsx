import { useMemo } from 'react';
import { MOCK } from '../mock/mock';
import { useSms } from '../../../hooks/sms/useSms';
import { FileOutlined } from '@ant-design/icons';
import { useUserData } from '../../../context/UserDataContext';
import styles from './style/Chat.module.css';
// import { PRODMODE } from '../../../config/config';

export default function ChatList({ search, onSelectChat, selectedChatId }) {
	const { userdata } = useUserData();
	const currentUserId = userdata?.user?.id;

	const {
		data: smsList = [],
		loading,
		error,
	} = useSms({
		// url: '/api/sms',
		chatId: 0,
		mock: MOCK,
		search,
	});

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
	const getRole = useMemo(() => {
		return (sms) => {
			if (!sms || !currentUserId) return null;

			// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ä–æ–ª—å 'self'
			if (sms.from?.id === currentUserId) {
				return 'self';
			}

			// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ä–æ–ª—å 'companion'
			return 'companion';
		};
	}, [currentUserId]);

	const chats = useMemo(() => {
		const normalizedSearch = search.toLowerCase();

		console.log('üîÑ Processing chats, smsList length:', smsList.length);

		const filtered = smsList.filter((sms) => {
			const role = getRole(sms);
			console.log('üìû Role for sms:', sms.id, role);

			// –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö (–æ—Ç —Å–µ–±—è —Å–µ–±–µ)
			if (sms.to?.id === currentUserId && sms.from?.id === currentUserId) {
				return true;
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
			const searchUser = role === 'self' ? sms.to : sms.from;

			const fullName = `${searchUser?.surname ?? ''} ${searchUser?.name ?? ''}`.toLowerCase();
			const messageText = sms.text?.toLowerCase() || '';
			const matchesSearch =
				fullName.includes(normalizedSearch) || messageText.includes(normalizedSearch);

			console.log('üîé Search check:', { fullName, messageText, normalizedSearch, matchesSearch });

			return matchesSearch;
		});

		console.log('üì± Filtered chats after search:', filtered.length);

		const uniqueChatsMap = {};
		filtered.forEach((sms) => {
			const chatId = sms.chat_id;
			const currentTime = sms.updated_at || sms.created_at;

			if (
				!uniqueChatsMap[chatId] ||
				currentTime > (uniqueChatsMap[chatId].updated_at || uniqueChatsMap[chatId].created_at)
			) {
				uniqueChatsMap[chatId] = sms;
			}
		});

		const result = Object.values(uniqueChatsMap).sort((a, b) => {
			const timeA = a.updated_at || a.created_at;
			const timeB = b.updated_at || b.created_at;
			return timeB - timeA;
		});

		console.log('üí¨ Final unique chats:', result.length);

		// –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ" —Å —Ä–æ–ª—å—é 'self'
		result.unshift({
			chat_id: 'saved',
			from: { id: currentUserId, name: '–í—ã', surname: '' },
			to: { id: currentUserId, name: '–í—ã', surname: '' },
			text: 'üìÅ',
			updated_at: Infinity,
			created_at: Infinity,
			isSavedChat: true,
		});

		return result;
	}, [smsList, search, currentUserId, getRole]);

	if (loading) return <p className={styles.statusMessage}>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...</p>;
	if (error) return <p className={styles.statusMessage}>–û—à–∏–±–∫–∞: {error}</p>;

	console.log('üéØ Rendering chats:', chats.length);

	return (
		<div className={styles['chat-list__container']}>
			<ul className={styles['chat-list']}>
				{chats.map((chat) => {
					const isSaved = chat.chat_id === 'saved' || chat.isSavedChat;
					const role = isSaved ? 'self' : getRole(chat);

					// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
					let displayName = '';
					if (isSaved) {
						displayName = '–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ';
					} else if (role === 'self') {
						// –î–ª—è —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
						displayName = `${chat.to?.surname ?? ''} ${chat.to?.name ?? ''}`.trim();
					} else {
						// –î–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
						displayName = `${chat.from?.surname ?? ''} ${chat.from?.name ?? ''}`.trim();
					}

					const lastMessageText = chat.text || (
						<>
							<FileOutlined /> –§–∞–π–ª
						</>
					);

					const isActive = chat.chat_id === selectedChatId;

					return (
						<li
							key={chat.chat_id}
							className={`${styles.chatItem} ${isActive ? styles.activeChatItem : ''}`}
							onClick={() => {
								console.log('üñ±Ô∏è Selecting chat:', chat.chat_id);
								onSelectChat?.(chat.chat_id);
							}}
						>
							<div className={styles.companionName}>{displayName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}</div>
							<div className={styles.lastMessage}>
								{typeof lastMessageText === 'string'
									? lastMessageText.length > 20
										? `${lastMessageText.slice(0, 20)} ...`
										: lastMessageText
									: lastMessageText}
							</div>
						</li>
					);
				})}
			</ul>
		</div>
	);
}
