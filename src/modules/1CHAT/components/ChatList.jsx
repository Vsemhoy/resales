import { useMemo, useState, useEffect, useCallback } from 'react';
import { FileOutlined } from '@ant-design/icons';
import { useUserData } from '../../../context/UserDataContext';
import { useChatSocket } from '../../../context/ChatSocketContext';
import { MOCK } from '../mock/mock';
import styles from './style/Chat.module.css';
import React from 'react';

// --- –ú–µ–º–æ—Ä–∏–∑–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞ ---
const ChatListItem = React.memo(({ chat, isActive, onSelectChat, getCompanion }) => {
	const isSaved = chat.isSavedChat || chat.chat_id === 'saved';
	const companion = isSaved ? null : getCompanion(chat);
	const lastMessageText =
		chat.text ||
		(chat.files?.length > 0 ? (
			<>
				<FileOutlined /> –§–∞–π–ª
			</>
		) : (
			''
		));

	return (
		<li
			key={chat.chat_id}
			className={`${styles.chatItem} ${isActive ? styles.activeChatItem : ''}`}
			onClick={() => onSelectChat?.(chat.chat_id)}
		>
			<div className={styles.companionName}>
				{isSaved ? '–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ' : `${companion?.surname ?? ''} ${companion?.name ?? ''}`.trim()}
			</div>
			<div className={styles.lastMessage}>
				{typeof lastMessageText === 'string'
					? lastMessageText.length > 30
						? `${lastMessageText.slice(0, 30)} ...`
						: lastMessageText
					: lastMessageText}
			</div>
		</li>
	);
});

export default function ChatList({ search, onSelectChat, selectedChatId }) {
	const { userdata } = useUserData();
	const { chats, connectionStatus, socket, localMessages } = useChatSocket();
	const currentUserId = userdata?.user?.id;

	const [smsList, setSmsList] = useState([]);
	const [loading, setLoading] = useState(true);
	const [error, setError] = useState(null);

	// --- –ü–æ–ª—É—á–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ---
	const getCompanion = useMemo(
		() => (sms) => {
			if (!sms || !currentUserId) return null;
			return sms.from?.id === currentUserId ? sms.to : sms.from;
		},
		[currentUserId]
	);

	// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ smsList –ø—Ä–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
	const updateSmsList = useCallback(
		(newSms) => {
			setSmsList((prev) => {
				const existingIndex = prev.findIndex((sms) => sms.id === newSms.id);
				if (existingIndex >= 0) {
					const copy = [...prev];
					copy[existingIndex] = newSms; // –æ–±–Ω–æ–≤–ª—è–µ–º
					return copy;
				} else {
					return [...prev, newSms]; // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
				}
			});
		},
		[setSmsList]
	);

	// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
	useEffect(() => {
		setLoading(true);
		setError(null);

		try {
			if (connectionStatus === 'connected' && Array.isArray(chats) && chats.length > 0) {
				setSmsList(chats);
			} else {
				const sms = MOCK?.content?.sms || [];
				setSmsList(Array.isArray(sms) ? sms : []);
			}
		} catch (err) {
			setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
			setSmsList([]);
		} finally {
			setLoading(false);
		}
	}, [chats, connectionStatus]);

	// --- –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ socket.io ---
	useEffect(() => {
		if (connectionStatus === 'connected' && socket) {
			const handleNewMessage = (msg) => updateSmsList(msg);
			socket.on('message:new', handleNewMessage);
			return () => socket.off('message:new', handleNewMessage);
		}
	}, [socket, connectionStatus, updateSmsList]);

	// --- –ú–æ–∫–æ–≤—ã–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ PRODMODE === false ---
	useEffect(() => {
		if (connectionStatus !== 'mock') return;

		const interval = setInterval(() => {
			const newMsgId = Date.now();
			const newSms = {
				id: newMsgId,
				chat_id: 540,
				from: { id: 540, name: '–ê–Ω–∞—Ç–æ–ª–∏–π', surname: '–î—Ä–æ–±–æ—Ç–µ–Ω–∫–æ' },
				to: { id: 46, name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', surname: '–ö–æ—à–µ–ª–µ–≤' },
				text: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #${newMsgId}`,
				created_at: Math.floor(Date.now() / 100),
				updated_at: Math.floor(Date.now() / 100),
				files: [],
			};
			updateSmsList(newSms);
		}, 12000);

		return () => clearInterval(interval);
	}, [connectionStatus, updateSmsList]);

	// --- –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
	const mergedSmsList = useMemo(() => {
		const local = Array.isArray(localMessages) ? localMessages : [];
		const existingIds = new Set(smsList.map((m) => m.id));
		const newLocal = local.filter((m) => !existingIds.has(m.id));
		return [...smsList, ...newLocal];
	}, [smsList, localMessages]);

	// --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ---
	const chatList = useMemo(() => {
		if (!mergedSmsList || mergedSmsList.length === 0) return [];

		const normalizedSearch = search?.toLowerCase() || '';
		const chatsMap = new Map();

		mergedSmsList.forEach((sms) => {
			const chatId = sms.chat_id;
			const currentTime = sms.updated_at || sms.created_at;
			const existing = chatsMap.get(chatId);
			if (!existing || currentTime > (existing.updated_at || existing.created_at)) {
				chatsMap.set(chatId, sms);
			}
		});

		let result = [...chatsMap.values()];

		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∏—Å–∫—É
		result = result.filter((sms) => {
			const companion = getCompanion(sms);
			const fullName = `${companion?.surname ?? ''} ${companion?.name ?? ''}`.toLowerCase();
			const messageText = sms.text?.toLowerCase() || '';
			return fullName.includes(normalizedSearch) || messageText.includes(normalizedSearch);
		});

		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
		result.sort((a, b) => {
			const timeA = a.updated_at || a.created_at;
			const timeB = b.updated_at || b.created_at;
			return timeB - timeA;
		});

		// –î–æ–±–∞–≤–ª—è–µ–º "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ"
		result.unshift({
			chat_id: 'saved',
			from: { id: currentUserId, name: '–í—ã', surname: '' },
			to: { id: currentUserId, name: '–í—ã', surname: '' },
			text: 'üìÅ',
			isSavedChat: true,
			updated_at: Infinity,
			created_at: Infinity,
		});

		return result;
	}, [mergedSmsList, search, currentUserId, getCompanion]);

	if (loading) return <p className={styles.statusMessage}>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...</p>;
	if (error) return <p className={styles.statusMessage}>–û—à–∏–±–∫–∞: {error}</p>;

	return (
		<div className={styles['chat-list__container']}>
			<ul className={styles['chat-list']}>
				{chatList.map((chat) => (
					<ChatListItem
						key={chat.chat_id}
						chat={chat}
						isActive={chat.chat_id === selectedChatId}
						onSelectChat={onSelectChat}
						getCompanion={getCompanion}
					/>
				))}
			</ul>
		</div>
	);
}
