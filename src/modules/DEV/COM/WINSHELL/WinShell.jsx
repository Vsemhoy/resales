import React, { useState, useEffect, useRef } from 'react';
import './components/style/winshell.css';
import { Button, Dropdown } from 'antd';
import {
  ArrowDownOutlined,
  ArrowLeftOutlined,
  ArrowRightOutlined,
  BorderOuterOutlined,
  BorderOutlined,
  CloseOutlined,
  DashOutlined,
  FullscreenOutlined,
} from '@ant-design/icons';
import StateWarningIcon from '../../../../assets/Comicon/States/StateWarningIcon';

const WinShell = ({ children, title = "–ß–∞—Ç–∏–∫", on_close }) => {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [position, setPosition] = useState({ x: 400, y: 100 });
  const [size, setSize] = useState({ width: 350, height: 500 });
  const [snapSide, setSnapSide] = useState('none'); // 'left', 'right', 'bottom', 'none'
  const [isHoverCollapseEnabled, setIsHoverCollapseEnabled] = useState(true); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –ø–æ —Ö–æ–≤–µ—Ä—É

  const dragRef = useRef(null);
  const resizeRef = useRef(null);
  const windowRef = useRef(null);

  const STORAGE_KEY = 'chatWindow_state';

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
  useEffect(() => {
    const saved = localStorage.getItem(STORAGE_KEY);
    if (saved) {
      const state = JSON.parse(saved);
      setIsCollapsed(state.isCollapsed || false);
      setPosition(state.position || { x: 400, y: 100 });
      setSize(state.size || { width: 350, height: 500 });
      setSnapSide(state.snapSide || 'none');
      setIsHoverCollapseEnabled(state.isHoverCollapseEnabled !== false); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    const state = { isCollapsed, position, size, snapSide, isHoverCollapseEnabled };
    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
  }, [isCollapsed, position, size, snapSide, isHoverCollapseEnabled]);

  // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
  const startDrag = (e) => {
    e.preventDefault();
    const startX = e.clientX - position.x;
    const startY = e.clientY - position.y;

    const handleMove = (e) => {
      const newX = e.clientX - startX;
      const newY = e.clientY - startY;
      setPosition({ x: newX, y: newY });
    };

    const stopDrag = () => {
      document.removeEventListener('mousemove', handleMove);
      document.removeEventListener('mouseup', stopDrag);
    };

    document.addEventListener('mousemove', handleMove);
    document.addEventListener('mouseup', stopDrag);
  };

  // –†–µ—Å–∞–π–∑
  const startResize = (e) => {
    e.preventDefault();
    const startX = e.clientX;
    const startY = e.clientY;
    const startWidth = size.width;
    const startHeight = size.height;

    const handleMove = (e) => {
      const newWidth = Math.max(250, Math.min(600, startWidth + (e.clientX - startX)));
      const newHeight = Math.max(300, Math.min(800, startHeight + (e.clientY - startY)));
      setSize({ width: newWidth, height: newHeight });
    };

    const stopResize = () => {
      document.removeEventListener('mousemove', handleMove);
      document.removeEventListener('mouseup', stopResize);
    };

    document.addEventListener('mousemove', handleMove);
    document.addEventListener('mouseup', stopResize);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–∏–ø–∞–Ω–∏—è –∫ —Å—Ç–æ—Ä–æ–Ω–µ
  const snapToSide = (side) => {
    if (side === 'none') {
      setSnapSide('none');
      setIsCollapsed(false);
      return;
    }

    setSnapSide(side);
    setIsCollapsed(true); // –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî —Å—Ä–∞–∑—É —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –æ–∫–Ω–æ –Ω–µ "–ø—Ä—ã–≥–∞–ª–æ"
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–æ–º–Ω–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ "–ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–æ–±–æ–¥–Ω—É—é"
    // –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–æ —Ö–æ–≤–µ—Ä—É
  const toggleHoverCollapse = () => {
    setIsHoverCollapseEnabled(!isHoverCollapseEnabled);
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–∫–Ω–∞ ‚Äî —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —á–µ—Ä–µ–∑ CSS-–∫–ª–∞—Å—Å—ã
  const getWindowStyle = () => {
    let style = {
      width: size.width,

      left: position.x,
      top: position.y,
      position: 'absolute',
      zIndex: 999,
      transition: isCollapsed ? 'none' : 'all 0.2s ease', // –ø–ª–∞–≤–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏
    };

    if (!isHoverCollapseEnabled ) {
        style.height = size.height;
    };
    // –ï—Å–ª–∏ –ø—Ä–∏–ª–∏–ø—à–∏–π ‚Äî —É–±–∏—Ä–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø—É—Å—Ç—å CSS —É–ø—Ä–∞–≤–ª—è–µ—Ç
    if (snapSide !== 'none') {
      style = {
        ...style,
        left: 'auto',
        top: 'auto',
        right: 'auto',
        bottom: 'auto',
      };
    }

    return style;
  };

  // –ú–µ–Ω—é –¥–ª—è –ø—Ä–∏–ª–∏–ø–∞–Ω–∏—è
  const snapMenu = [
    {
      key: 'snap-left',
      label: (
        <div onClick={() => snapToSide('left')}>
          Snap Left
        </div>
      ),
      icon: <ArrowLeftOutlined />,
    },
    {
      key: 'snap-right',
      label: (
        <div onClick={() => snapToSide('right')}>
          Snap Right
        </div>
      ),
      icon: <ArrowRightOutlined />,
    },
    {
      key: 'snap-bottom',
      label: (
        <div onClick={() => snapToSide('bottom')}>
          Snap Bottom
        </div>
      ),
      icon: <ArrowDownOutlined />,
    },
    {
      key: 'snap-off',
      label: (
        <div onClick={() => snapToSide('none')}>
          Snap Off
        </div>
      ),
      icon: <FullscreenOutlined />,
    },
  ];

  return (
    <div
      ref={windowRef}
      className={`win-shell snap-${snapSide} ${isCollapsed ? 'collapsed' : ''} ${isHoverCollapseEnabled ? 'hovercollapsed' : ''}`}
      style={getWindowStyle()}
      onMouseEnter={() => isHoverCollapseEnabled && snapSide !== 'none' && setIsCollapsed(false)}
      onMouseLeave={() => isHoverCollapseEnabled && snapSide !== 'none' && setIsCollapsed(true)}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div
        className="win-header"
        ref={dragRef}
        onMouseDown={startDrag}
        style={{ cursor: 'move', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}
      >
        <span title={title}><StateWarningIcon height={'24px'} /></span>
        <div style={{ display: 'flex', gap: '4px' }}>
          <Dropdown menu={{ items: snapMenu }} trigger={['hover']} placement="bottomRight">
            <Button icon={<BorderOuterOutlined />} size="small" />
          </Dropdown>

          <Button
            icon={isHoverCollapseEnabled ? <DashOutlined /> :  <BorderOutlined />}
            size="small"
            title={isHoverCollapseEnabled ? "Disable hover collapse" : "Enable hover collapse"}
            onClick={toggleHoverCollapse}
          />

          <Button
            icon={<CloseOutlined />}
            size="small"
            danger
            onClick={on_close}
            title="Toggle collapse"
          />
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      {!isCollapsed && (
        <div className="win-content" style={{ height: 'calc(100% - 40px)', overflow: 'auto' }}>
          {children || <div>–¢—É—Ç –±—É–¥–µ—Ç —á–∞—Ç...</div>}
        </div>
      )}

      {/* –†–µ—Å–∞–π–∑–µ—Ä */}
      {!isCollapsed && snapSide === 'none' && (
        <div
          ref={resizeRef}
          className="resizer"
          onMouseDown={startResize}
        />
      )}

      {/* –ò–∫–æ–Ω–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è (–¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è UX) */}
      <div
        className="drag-handle"
        onMouseDown={startDrag}
      >
        üûå
      </div>
    </div>
  );
};

export default WinShell;